Usage

	The general process of using <<reb4j>> consists of building up an
	expression from sub-expressions, then calling the 
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#toPattern()}toPattern}}
	method of the constructed expression in order to compile the expression.
	
	Expressions are represented by the 
	{{{./apidocs/net/sourceforge/reb4j/Regex.html}Regex}} class, instances of
	which are immutable after being constructed, which allows a single
	instance to be re-used as a sub-expression in many different expressions.
	
	There is one sub-class, 
	{{{./apidocs/net/sourceforge/reb4j/CharClass.html}CharClass}}, which
	represents the specialized case of character classes (usually represented 
	in regular expressions as ranges of characters surrounded by square
	brackets.  Character classes (instances of 
	{{{./apidocs/net/sourceforge/reb4j/CharClass.html}CharClass}}) may be 
	composed from other character classes, and larger expressions may be
	composed from character classes, but character classes cannot be
	composed from non-character class expressions (hence the need for a
	separate class to distinguish them).
	
* Expression Types
	
	<<reb4j>> provides the means to programmatically utilize any of the features of the 
	{{{http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html}java.util.regex.Pattern}}
	class.  As such, there are many ways to build up regular expressions 
	from their elemental parts.
	
	Literals
	
		The simplest type of sub-expression you are likely to need is a 
		basic string match.  <<reb4j>> makes this easy with the static 
		{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#literal(java.lang.CharSequence)}Regex.literal}}
		method.
			
-------------------------------------------------------------------------------
final Regex aBunchOfBracketsFollowedByAnA = Regex.literal("[[[[[A");
-------------------------------------------------------------------------------

		Notice that <<reb4j>> handles escaping characters that have special
		meaning in regular expressions, so you do not need to
		concern yourself with it.
			
** Sequences
		
	A common way to compose two or more expressions to is to define
	a sequence of expressions that are to appear in a particular
	order in the input.  <<reb4j>> provides both a static and a 
	non-static method for accomplishing this.
	
	The non-static 
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#then(net.sourceforge.reb4j.Regex)}Regex.then}}
	method allows you to define a sequence of sub-expressions by chaining.

-------------------------------------------------------------------------------
final Regex ab = Regex.literal("ab");
final Regex cd = Regex.literal("cd");
final Regex abcd = ab.then(cd);
-------------------------------------------------------------------------------			
			
	However, the static 
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#sequence(net.sourceforge.reb4j.Regex...)}Regex.sequence}}
	method is likely to be more convenient when dealing with sequences 
	consisting of more than two sub-expressions.

-------------------------------------------------------------------------------
final Regex a = Regex.literal("a");
final Regex b = Regex.literal("b");
final Regex c = Regex.literal("c");
final Regex d = Regex.literal("d");
final Regex abcd = Regex.sequence(a, b, c, d);
-------------------------------------------------------------------------------
			
** Alternation
		
	Another common way to compose two or more expressions is to define
	alternates, with the composed expression representing the logical
	OR of the subexpressions.  In regular expressions, this is
	indicated by the | character.  In <<reb4j>>, it is accomplished
	using the 
	{{{http://reb4j.sourceforge.net//apidocs/net/sourceforge/reb4j/Regex.html#or(net.sourceforge.reb4j.Regex)}Regex.or}}
	method, which comes in both
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#or(net.sourceforge.reb4j.Regex...)}static}}
	and non-static forms.
			
-------------------------------------------------------------------------------
final Regex a = Regex.literal("a");
final Regex b = Regex.literal("b");
final Regex c = Regex.literal("c");
final Regex a_or_b = a.or(b); // using non-static version
final Regex a_or_b_or_c = Regex.or(a, b, c); // using static-version
-------------------------------------------------------------------------------
			
** Quantifiers
		
	One of the most important features of regular expressions is the
	ability to indicate that a sub-expression may (or must) appear
	multiple times.  This is expressed using quantifiers.
	
*** Kleene Star
	
	The most fundamental type of quantifier is the Kleene Star,
	which is indicated by an asterisk (*) in most regular
	expression languages.  It indicates that the preceding
	sub-expression may appear zero or more times in a row.
	<<reb4j>> supports this with the non-static
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#star()}Regex.star}}
	method.

-------------------------------------------------------------------------------
final Regex a = Regex.literal("a");
final Regex zeroOrMore_a = a.star();
-------------------------------------------------------------------------------
			
*** One or More

	As an extension to the Kleene Star, most regular expression
	languages support a means to indicate that an expression must
	appear at least once.  This is typically done with the plus (+)
	operator.  <<reb4j>> provides support for this with the
	non-static
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#atLeastOnce()}Regex.atLeastOnce}}
	method.
				
-------------------------------------------------------------------------------
final Regex a = Regex.literal("a");
final Regex a_repeating = a.atLeastOnce();
-------------------------------------------------------------------------------
			
*** Optional

	It is also possible to indicate that a sub-expression may
	appear exactly once or not at all, using the ? operator.
	<<reb4j>> provides for this with the 
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#optional()}Regex.optional}}
	method.
				
-------------------------------------------------------------------------------
final Regex toBe = Regex.literal("to be");
final Regex toBeOrNotToBe = toBe.optional();
-------------------------------------------------------------------------------

*** Bounded Repetition

	The {{{http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html}Pattern}}
	class allows for a specific number of repetitions or range of 
	repetitions to be specified by enclosing the bounds in curly 
	braces ({}), and in the case of a range of values, separating 
	the minimum and maximum counts with a comma (,), possibly
	omitting either bound.  <<reb4j>> supports all possibilities
	with a range of non-static methods.
	
	The {{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#repeat(int)}Regex.repeat(int)}}
	method can be used to specify an exact number of repetitions.
	Its overloaded form,
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#repeat(int, int)}Regex.repeat(int, int)}}
	can be used to indicate minimum and maximum numbers of repetitions.
	
	The {{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#atLeast(int)}Regex.atLeast(int)}}
	method can be used to specify a minimum number of repetitions with no maximum.
	
	Examples of the use of each of these are shown below.
				
-------------------------------------------------------------------------------
final Regex a = Regex.literal("a");
final Regex a_4_times = a.repeat(4);
final Regex a_between_3_and_6_times = a.repeat(3, 6);
final Regex a_at_least_5_times = a.atLeast(5);
final Regex a_at_most_twice = a.repeat(0, 2);
-------------------------------------------------------------------------------

** Capturing Groups

	The {{{http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html}Pattern}}
	class allows you to indicate (using unqualified parentheses)
	sub-expressions that are to be used as "capturing groups".  These
	groups are implicitly numbered in the order they appear in the
	regular expression, and, if they match, the segments of the input
	that matched each group can be independently obtained.
	To designate a sub-expression as a capturing group with <<reb4j>>,
	use the non-static
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#group()}group}} method.
	Be sure to pay attention to how your final expression is constructed.
	The groups will be numbered according to the order in which they begin
	in the final regular expression, which is not necessarily the same as
	the order you invoke the
	{{{http://reb4j.sourceforge.net/apidocs/net/sourceforge/reb4j/Regex.html#group()}group}} method.
		
-------------------------------------------------------------------------------
final Regex ABCs = Regex.literal("ABC").atLeastOnce();
final Regex oneTwoThrees = Regex.literal("123").atLeastOnce();
final Regex ABCsAndOneTwoThrees = ABCs.group().then(oneTwoThrees);
final Pattern pattern = ABCsAndOneTwoThrees.toPattern();
final Matcher matcher = pattern.matcher("ABCABCABC123123123");
if (matcher.matches())
{
	final String matchedABCs = matcher.group(1);
}
-------------------------------------------------------------------------------
			
** TODO: Character Classes
		
	TODO: fill this in.
		
** TODO: Adopted Patterns
	
	TODO: fill this in.
		